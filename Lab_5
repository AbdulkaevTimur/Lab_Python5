'''
Задана рекуррентная функция. Область определения функции – натуральные числа.
Написать программу сравнительного вычисления данной функции рекурсивно и итерационно.
Определить границы применимости рекурсивного и итерационного подхода.
Вариант 1: F(1) = 2; G(1) = 1; F(n) = (-1)**n * ((n–1)! – G(n–1)), G(n) = F(n–1) + G(n–1), при n >=2
'''

import timeit
import matplotlib.pyplot as plt


factorial = 1
def dynamic_factorial(n):
    global factorial
    factorial = n * factorial
    return factorial

def recursive_factorial(n):
    if n == 1:
        return 1
    else:
        return n * recursive_factorial(n-1)


def iterative_factorial(n):
    result = 1
    for i in range(2, n+1):
        result *= i
    return result

G_value = 1
F_value = 2

# G
def G(n):
    global G_value, F_value
    if n == 1:
        return 1
    else:
        G_value = F(n-1) + G(n-1)
        return G_value

# F
def F(n):
    global G_value, F_value
    if n == 1:
        return 2
    else:
        global k
        k *= -1
        F_value = k * (dynamic_factorial(n-1) - G(n-1))
        return F_value

# Время time.time
def score_time(func, n):
    return timeit.timeit(lambda: func(n), number=1000)

# Значения n для которых мы хотим измерить время выполнения
n_values = range(2, 100)
recursive_times = []
iterative_times = []
step = 1


for n in n_values:
    recursive_times.append(score_time(recursive_factorial, n))
    iterative_times.append(score_time(iterative_factorial, n))


# Вывод
print(f"{'n':<10}{'Рекурсивное время (мс)':<25}{'Итерационное время (мс)':<25}")
for i, n in enumerate(n_values):
    print(f"{n:<10}{recursive_times[i]:<25}{iterative_times[i]:<25}")

# График
plt.plot(n_values, recursive_times, label='Рекурсивно')
plt.plot(n_values, iterative_times, label='Итерационно')
plt.xlabel('n')
plt.ylabel('Время (в миллисекундах)')
plt.legend()
plt.title('Время вычисления функции F(n)')
plt.show()
